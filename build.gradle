plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.hidetake.ssh' version '2.10.1'
}

group = 'me.synology.hajubal'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
	//plain.jar 파일 생성되지 않도록 설정
	enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.slack.api:slack-api-client:1.27.1'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation 'mysql:mysql-connector-java:8.0.30'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

//서버 접속 정보
remotes {
	dockerServer {
		host = 'hajubal.synology.me'
		user = project.SSH_ID
		password = project.SSH_PW
		port = Integer.valueOf(project.SSH_PORT)
	}
}

//도커 서버에 이미지 생성 및 컨테이너 실행
task dockerDeploy(dependsOn: build) {
	doLast {
		println ssh.version
		ssh.run {
			session(remotes.dockerServer) {
				def command
				def imageName = "${project.name}:${project.version}"
				def containerName = "${project.name}"
				def buildPath = "${project.buildDir.getAbsolutePath()}\\libs"
				def jarName = "${jar.getArchiveBaseName().get()}-${jar.getArchiveVersion().get()}.jar"
				def from = "${buildPath}\\${jarName}"
				def to = "/home/docke/service/${project.name}"
				def hostPort = "40000"
				def containerPort = "8080"
				def dockerFile = "${project.file("Dockerfile")}"

				command = 'docker version'
				println "\n\$ ${command}"
				execute(command){r->println r}

				command = "ls ${to}"
				println "\n\$ ${command}"
				execute(command){r->println r}

				//프로젝트 폴더 삭제 후 재생성
				command = "rm -r ${to}"
				println "\n\$ ${command}"
				execute(command){r->println r}

				command = "mkdir ${to}"
				println "\n\$ ${command}"
				execute(command){r->println r}

				//프로젝트 폴더에 jar 파일 복사
				println "\n\$ put from:${from}, into: ${to}/${containerName}.jar"
				put from: from, into: to + "/" + containerName + ".jar"

				//프로젝트 폴더에 Dockerfile 복사
				println "\n\$ put from: ${dockerFile}, into: ${to}"
				put from: dockerFile, into: to

				//기존 컨테이너 중지/삭제
				command = "docker stop ${containerName}"
				println "\n\$ ${command}"
				execute(command, ignoreError: true){r->println r}

				command = "docker rm ${containerName}"
				println "\n\$ ${command}"
				execute(command, ignoreError: true){r->println r}

				//이번에 생성되는 이미지 명으로 이미 생성된 이미지 삭제
				command = "docker rmi ${imageName}"
				println "\n\$ ${command}"
				execute(command, ignoreError: true){r->println r}

				//Dockerfile 실행
				command = "docker build ${to} -t ${imageName}"
				println "\n\$ ${command}"
				execute(command){r->println r}

				//신규 이미지로 컨테이너 생성/실행
				command = "docker run -d -p ${hostPort}:${containerPort} --name ${containerName} ${imageName}"
				println "\n\$ ${command}"
				execute(command){r->println r}
			}
		}
	}
}