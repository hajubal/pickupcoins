buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.hidetake.ssh' version '2.10.1'
	id "nebula.integtest" version "8.2.0"
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

group = 'me.synology.hajubal'
version = '1.1.1'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

jar {
	//plain.jar 파일 생성되지 않도록 설정
	enabled = false

	manifest {
		attributes(
				'Implementation-Version': project.version
		)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'com.slack.api:slack-api-client:1.27.1'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'mysql:mysql-connector-java:8.0.30'
	runtimeOnly 'com.h2database:h2'

	//querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//m1 mac netty lib
	if (System.getProperty("os.name") == "Mac OS X" && System.getProperty("os.arch") == "aarch64") {
		runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.94.Final:osx-aarch_64")
	}

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'commons-beanutils:commons-beanutils:1.9.4'
	integTestImplementation "org.seleniumhq.selenium:htmlunit-driver"
}

springBoot {
	buildInfo()
}

test {
	// 테스트 결과의 상세한 정보를 출력
	testLogging {
		events "passed", "skipped", "failed"
	}
}


tasks.withType(Test).configureEach {
	useJUnitPlatform()
	outputs.upToDateWhen { false }
}


ext.SSH_HOST = project.getProperties().getOrDefault("SSH_HOST", "127.0.0.1")
ext.SSH_ID = project.getProperties().getOrDefault("SSH_ID", "test")
ext.SSH_PW = project.getProperties().getOrDefault("SSH_PW", "test")
ext.SSH_PORT = project.getProperties().getOrDefault("SSH_PORT", "22")

//서버 접속 정보
remotes {
	dockerServer {
		host = "${SSH_HOST}"
		user = "${SSH_ID}"
		password = "${SSH_PW}"
		port = Integer.parseInt("${SSH_PORT}")
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs.add("-parameters")
}

ssh.settings {
	knownHosts = allowAnyHosts
}

//도커 서버에 이미지 생성 및 컨테이너 실행
//org.hidetake.groovy.ssh.operation.SftpException: Failed SFTP PUT: d:\~~ -> dockerServer:/var/~~: (SSH_FX_NO_SUCH_FILE: A reference was made to a file which does not exist): No such file
//오류 나면서 안됨. 원인 파악 불가
//==> 원인: 시놀로지의 경우 ssh로 보여지는 path와 ftp로 보는 경로가 다름. 그래서 scp로 업로도할 경로는 ftp로 접속해서 보여지는 경로로 업로드 해야 함.
tasks.register('dockerDeploy') {
	dependsOn('build')

	doLast {
		println ssh.version
		ssh.run {
			session(remotes.dockerServer) {
				def jarFile = bootJar.archiveFile.get().asFile

				//시놀로지의 경우 ssh로 보여지는 path와 ftp로 보는 경로가 다름.
				def to = "/homes/hajubal/dockerfile/${project.name}"

				//시놀로지 명령어가 실행되는 경로
				def commandTo = "/var/services/homes/hajubal/dockerfile/${project.name}"

				def dockerFile = project.file("Dockerfile")
				def dockerComposeFile = project.file("docker-compose.yml")
				def envFile = project.file(".env")

				//프로젝트 폴더에 파일 복사
				put from: jarFile, into: "${to}/pickupcoins.jar"
				put from: dockerFile, into: to
				put from: dockerComposeFile, into: to
				put from: envFile, into: to

				execute("/usr/local/bin/docker-compose -f ${commandTo}/docker-compose.yml build", ignoreError: true){r->println r}
				execute("/usr/local/bin/docker-compose -f ${commandTo}/docker-compose.yml up -d", ignoreError: true){r->println r}
			}
		}
	}
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}
//querydsl 추가 끝