plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.hidetake.ssh' version '2.10.1'
}

group = 'me.synology.hajubal'
version = '1.0.4'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

jar {
	//plain.jar 파일 생성되지 않도록 설정
	enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	implementation 'org.springframework.boot:spring-boot-starter-undertow'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'com.slack.api:slack-api-client:1.27.1'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation 'mysql:mysql-connector-java:8.0.30'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	runtimeOnly 'com.h2database:h2'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
	useJUnitPlatform()
}

ext.SSH_HOST = project.getProperties().getOrDefault("SSH_HOST", "127.0.0.1")
ext.SSH_ID = project.getProperties().getOrDefault("SSH_ID", "test")
ext.SSH_PW = project.getProperties().getOrDefault("SSH_PW", "test")
ext.SSH_PORT = project.getProperties().getOrDefault("SSH_PORT", "22")

//서버 접속 정보
remotes {
	dockerServer {
		host = "${SSH_HOST}"
		user = "${SSH_ID}"
		password = "${SSH_PW}"
		port = Integer.parseInt("${SSH_PORT}")
	}
}

ssh.settings {
	knownHosts = allowAnyHosts
}

tasks.register('dev') {
	doLast {
		def path = bootJar.archiveFile.get().asFile.getAbsolutePath()
		def dir = fileTree(dir: 'build').getDir()
		def dockerFile = project.file("Dockerfile")
		def buildPath = fileTree(dir: 'build').getDir()

		println path
		println dir
		println dockerFile
		println buildPath

		def archiveNamePath = bootJar.archiveFile.get().asFile
		println 'archiveNamePath: ' + archiveNamePath

		def archiveName = bootJar.archiveFileName
		println 'archiveName: ' + archiveName

		def archiveFileName = jar.archiveFileName.get()
		println 'archiveFileName: ' + archiveFileName

		def archiveBaseName = jar.archiveBaseName.get()
		println 'archiveBaseName: ' + archiveBaseName

		def archiveExtension = jar.archiveExtension.get()
		println 'archiveExtension: ' + archiveExtension

		println "project name: ${project.name}"

		println "host: ${project.SSH_HOST}"
		println "id: ${project.SSH_ID}"
		println "pw: ${project.SSH_PW}"
		println "port: ${project.SSH_PORT}"
	}
}

//도커 서버 정보 출력
tasks.register('showPlatformVersion') {
	doLast {
		println ssh.version
		ssh.run {
			session(remotes.dockerServer) {
				def commandTo = "/var/services/homes/hajubal/dockerfile/${project.name}"

				execute 'hostname'
				execute "/usr/local/bin/docker-compose -f ${commandTo}/docker-compose.yml build"

				//execute 'java -version'
			}
		}
	}
}

//도커 서버에 이미지 생성 및 컨테이너 실행
//org.hidetake.groovy.ssh.operation.SftpException: Failed SFTP PUT: d:\~~ -> dockerServer:/var/~~: (SSH_FX_NO_SUCH_FILE: A reference was made to a file which does not exist): No such file
//오류 나면서 안됨. 원인 파악 불가
//==> 원인: 시놀로지의 경우 ssh로 보여지는 path와 ftp로 보는 경로가 다름. 그래서 scp로 업로도할 경로는 ftp로 접속해서 보여지는 경로로 업로드 해야 함.
tasks.register('dockerDeploy') {
	dependsOn('build')

	doLast {
		println ssh.version
		ssh.run {
			session(remotes.dockerServer) {
				def command
				def projectName = project.name
				def buildPath = "${project.buildDir.getAbsolutePath()}/libs"
				def jarName = "${jar.getArchiveBaseName().get()}-${jar.getArchiveVersion().get()}.jar"
				def from = "${buildPath}/${jarName}"
				def to = "/homes/hajubal/dockerfile/${project.name}"
				def commandTo = "/var/services/homes/hajubal/dockerfile/${project.name}"
				def dockerFile = project.file("Dockerfile")
				def dockerComposeFile = project.file("docker-compose.yml")

				command = "ls ${commandTo}"
				println "\n\$ ${command}"
				execute(command){r->println r}

				//프로젝트 폴더에 jar 파일 복사
				put from: from, into: "${to}/${projectName}.jar"

				//프로젝트 폴더에 Dockerfile 복사
				put from: dockerFile, into: to

				//프로젝트 폴더에 Dockerfile 복사
				put from: dockerComposeFile, into: to

				execute("/usr/local/bin/docker-compose -f ${commandTo}/docker-compose.yml build", ignoreError: true){r->println r}
				execute("/usr/local/bin/docker-compose -f ${commandTo}/docker-compose.yml up -d", ignoreError: true){r->println r}
			}
		}
	}
}
