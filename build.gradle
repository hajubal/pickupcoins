plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.hidetake.ssh' version '2.10.1'
}

group = 'me.synology.hajubal'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

jar {
	//plain.jar 파일 생성되지 않도록 설정
	enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.slack.api:slack-api-client:1.27.1'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation 'mysql:mysql-connector-java:8.0.30'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
	useJUnitPlatform()
}

task dev {
	doLast {
		def path = "${project.buildDir.getAbsolutePath()}\\lib\\${jar.archiveName}"
		def dir = fileTree(dir: 'build').getDir()
		def dockerFile = "${project.file("Dockerfile")}"
		def buildPath = fileTree(dir: 'build').getDir()

		println path
		println dir
		println dockerFile
		println buildPath

		def archiveNamePath = "${bootJar.archiveFile.get().asFile}"
		println 'archiveNamePath: ' + archiveNamePath

		def archiveName = "${bootJar.archiveName}"
		println 'archiveName: ' + archiveName

		def archiveFileName = "${jar.archiveFileName.get()}"
		println 'archiveFileName: ' + archiveFileName

		def archiveBaseName = "${jar.archiveBaseName.get()}"
		println 'archiveBaseName: ' + archiveBaseName

		def archiveExtension = "${jar.archiveExtension.get()}"
		println 'archiveExtension: ' + archiveExtension

		println ">>>>> ${jar.archiveFile.get().asFile.getAbsolutePath()}"


		println 'host: ' + project.SSH_HOST
		println 'id: ' + project.SSH_ID
		println 'pw: ' + project.SSH_PW
		println 'port: ' + Integer.valueOf(project.SSH_PORT)
	}
}

